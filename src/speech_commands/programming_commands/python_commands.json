{
    "python_commands": [
        {"name": "print statement", "action": "write(\"print()\"), press(\"left\")"},
        {"name": "create class",
            "action": "(write(\"class :\"), press(\"enter\"), press(\"tab\"), write(\"def __init__(self):\"), press(\"up\"), press(\"left\"))"
        },
        {"name": "create method", "action": "(write(\"def (self):\"), [press(\"left\") for _ in range(0, 7)])"},
        {"name": "create function", "action": "(write(\"def ():\"), [press(\"left\") for _ in range(0, 3)])"},
        {"name": "new script",
            "action": "(write(\"main():\"), press(\"enter\", 2), write('if __name__ == \"__main__\":'), press(\"enter\"), write(\"main\"))"},
        {"name": "integer", "action": "write(\"int\")"},
        {"name": "string", "action": "write(\"str\")"},
        {"name": "double", "action": "write(\"float\")"},
        {"name": "new environment", "action": "write(\"python3 -m venv .venv\")"},
        {"name": "bubble sort",
            "action": "write(\"def bubble_sort(lst):\"), press(\"enter\"), write(\"n = len(lst)\"), press(\"enter\"), write(\"new_list = lst[:]\"), press(\"enter\"), write(\"for i in range(n):\"), press(\"enter\"), write(\"swapped = False\"), press(\"enter\"), write(\"for j in range(0, n - i - 1):\"), press(\"enter\"), write(\"if new_list[j] > new_list[j + 1]:\"), press(\"enter\"), write(\"new_list[j], new_list[j + 1] = new_list[j + 1], new_list[j]\"), press(\"enter\"), write(\"swapped = True\"), press(\"enter\"), press(\"left\", 2), write(\"if not swapped:\"), press(\"enter\"), write(\"break\"), press(\"enter\"), press(\"left\", 2), write(\"return new_list\")"
        },
        {"name": "insertion sort",
          "action": "write(\"def insertion_sort(arr):\"), press(\"enter\"), write(\"new_arr = arr[:] #), press(\"enter\"), write(\"for i in range(1, len(new_arr)):\"), press(\"enter\"), write(\"key = new_arr[i]\"), press(\"enter\"), write(\"j = i - 1\"), press(\"enter\"), write(\"while j >= 0 and key < new_arr[j]:\"), press(\"enter\"), write(\"new_arr[j + 1] = new_arr[j]\"), press(\"enter\"), write(\"j -= 1\"), press(\"enter\"), press(\"left\", 4), write(\"new_arr[j + 1] = key\"), press(\"enter\"), press(\"left\", 4), write(\"return new_arr\"), press(\"enter\")"
        },
        {"name": "merge sort",
          "action": "write(\"def merge_sort(arr):\"), press(\"enter\"), write(\"if len(arr) <= 1:\"), press(\"enter\"), write(\"return arr[:] #return a copy\"), press(\"enter\"), press(\"left\", 4), press(\"left\", 4), write(\"mid = len(arr) // 2\"), press(\"enter\"), write(\"left = merge_sort(arr[:mid])\"), press(\"enter\"), write(\"right = merge_sort(arr[mid:])\"), press(\"enter\"), press(\"left\", 4), write(\"return _merge(left, right)\"), press(\"enter\"), press(\"left\", 4), press(\"left\", 4), write(\"def _merge(left, right):\"), press(\"enter\"), write(\"merged = []\"), press(\"enter\"), write(\"i = j = 0\"), press(\"enter\"), write(\"while i < len(left) and j < len(right):\"), press(\"enter\"), write(\"if left[i] < right[j]:\"), press(\"enter\"), write(\"merged.append(left[i])\"), press(\"enter\"), write(\"i += 1\"), press(\"enter\"), press(\"left\", 4), write(\"else:\"), press(\"enter\"), write(\"merged.append(right[j])\"), press(\"enter\"), write(\"j += 1\"), press(\"enter\"), press(\"left\", 4), press(\"left\", 4), write(\"merged.extend(left[i:])\"), press(\"enter\"), write(\"merged.extend(right[j:])\"), press(\"enter\"), write(\"return merged\"), press(\"enter\")"
        },
        {"name": "selection sort",
          "action": "write(\"def selection_sort(arr):\"), press(\"enter\"), write(\"new_arr = arr[:]\"), press(\"enter\"), write(\"for i in range(len(new_arr)):\"), press(\"enter\"), write(\"min_index = i\"), press(\"enter\"), write(\"for j in range(i + 1, len(new_arr)):\"), press(\"enter\"), write(\"if new_arr[j] < new_arr[min_index]:\"), press(\"enter\"), write(\"min_index = j\"), press(\"enter\"), press(\"left\", 4), press(\"left\", 4), write(\"new_arr[i], new_arr[min_index] = new_arr[min_index], new_arr[i]\"), press(\"enter\"), press(\"left\", 4), write(\"return new_arr\"), press(\"enter\")"
        },
        {"name": "quik sort",
          "action": "write(\"def quick_sort(arr):\"), press(\"enter\"), write(\"if len(arr) <= 1:\"), press(\"enter\"), write(\"return arr[:] #return a copy\"), press(\"enter\"), press(\"left\", 4), write(\"else:\"), press(\"enter\"), write(\"pivot = arr[0]\"), press(\"enter\"), write(\"less = [i for i in arr[1:] if i <= pivot]\"), press(\"enter\"), write(\"greater = [i for i in arr[1:] if i > pivot]\"), press(\"enter\"), write(\"return quick_sort(less) + [pivot] + quick_sort(greater)\"), press(\"enter\")\n"
        },
        {"name": "quiksort",
          "action": "write(\"def quick_sort(arr):\"), press(\"enter\"), write(\"if len(arr) <= 1:\"), press(\"enter\"), write(\"return arr[:] #return a copy\"), press(\"enter\"), press(\"left\", 4), write(\"else:\"), press(\"enter\"), write(\"pivot = arr[0]\"), press(\"enter\"), write(\"less = [i for i in arr[1:] if i <= pivot]\"), press(\"enter\"), write(\"greater = [i for i in arr[1:] if i > pivot]\"), press(\"enter\"), write(\"return quick_sort(less) + [pivot] + quick_sort(greater)\"), press(\"enter\")\n"
        },
        {"name": "bubble sort test",
            "action": "write(\"def bubble_sort(lst):\"), press(\"enter\"), write(\"n = len(lst)\"), press(\"enter\"), write(\"new_list = lst[:]\"), press(\"enter\"), write(\"for i in range(n):\"), press(\"enter\"), write(\"swapped = False\"), press(\"enter\"), write(\"for j in range(0, n - i - 1):\"), press(\"enter\"), write(\"if new_list[j] > new_list[j + 1]:\"), press(\"enter\"), write(\"new_list[j], new_list[j + 1] = new_list[j + 1], new_list[j]\"), press(\"enter\"), write(\"swapped = True\"), press(\"enter\"), press(\"left\", 2), write(\"if not swapped:\"), press(\"enter\"), write(\"break\"), press(\"enter\"), press(\"left\", 2), write(\"return new_list\")"
        }
    ]
}
